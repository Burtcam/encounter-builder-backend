// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: insert_monster.sql

package writeMonsters

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertFocusSpellCasting = `-- name: InsertFocusSpellCasting :one
INSERT INTO focus_spell_casting (monster_id, dc, mod, tradition, spellcasting_id, name, description, cast_level)
Values($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type InsertFocusSpellCastingParams struct {
	MonsterID      pgtype.Int4
	Dc             pgtype.Int4
	Mod            pgtype.Text
	Tradition      pgtype.Text
	SpellcastingID pgtype.Text
	Name           pgtype.Text
	Description    pgtype.Text
	CastLevel      pgtype.Text
}

func (q *Queries) InsertFocusSpellCasting(ctx context.Context, arg InsertFocusSpellCastingParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertFocusSpellCasting,
		arg.MonsterID,
		arg.Dc,
		arg.Mod,
		arg.Tradition,
		arg.SpellcastingID,
		arg.Name,
		arg.Description,
		arg.CastLevel,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertFocusSpellsCasts = `-- name: InsertFocusSpellsCasts :exec
INSERT INTO focus_spell_casting_spells (focus_spell_casting_id, spell_id)
VALUES ($1, $2)
`

type InsertFocusSpellsCastsParams struct {
	FocusSpellCastingID pgtype.Int4
	SpellID             pgtype.Text
}

func (q *Queries) InsertFocusSpellsCasts(ctx context.Context, arg InsertFocusSpellsCastsParams) error {
	_, err := q.db.Exec(ctx, insertFocusSpellsCasts, arg.FocusSpellCastingID, arg.SpellID)
	return err
}

const insertInnateSpellCasting = `-- name: InsertInnateSpellCasting :one
INSERT INTO innate_spell_casting (monster_id, dc, tradition, mod, spellcasting_id, description, name)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type InsertInnateSpellCastingParams struct {
	MonsterID      pgtype.Int4
	Dc             pgtype.Int4
	Tradition      pgtype.Text
	Mod            pgtype.Text
	SpellcastingID pgtype.Text
	Description    pgtype.Text
	Name           pgtype.Text
}

func (q *Queries) InsertInnateSpellCasting(ctx context.Context, arg InsertInnateSpellCastingParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertInnateSpellCasting,
		arg.MonsterID,
		arg.Dc,
		arg.Tradition,
		arg.Mod,
		arg.SpellcastingID,
		arg.Description,
		arg.Name,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertInnateSpellUse = `-- name: InsertInnateSpellUse :exec
INSERT INTO innate_spell_uses (innate_spell_casting_id, spell_id, level, uses)
VALUES ($1, $2, $3, $4)
`

type InsertInnateSpellUseParams struct {
	InnateSpellCastingID pgtype.Int4
	SpellID              pgtype.Text
	Level                pgtype.Int4
	Uses                 pgtype.Text
}

func (q *Queries) InsertInnateSpellUse(ctx context.Context, arg InsertInnateSpellUseParams) error {
	_, err := q.db.Exec(ctx, insertInnateSpellUse,
		arg.InnateSpellCastingID,
		arg.SpellID,
		arg.Level,
		arg.Uses,
	)
	return err
}

const insertItemTraits = `-- name: InsertItemTraits :exec
INSERT INTO item_traits (item_id, trait)
VALUES ($1, $2)
`

type InsertItemTraitsParams struct {
	ItemID pgtype.Text
	Trait  pgtype.Text
}

func (q *Queries) InsertItemTraits(ctx context.Context, arg InsertItemTraitsParams) error {
	_, err := q.db.Exec(ctx, insertItemTraits, arg.ItemID, arg.Trait)
	return err
}

const insertItems = `-- name: InsertItems :one
INSERT INTO items (monster_id, id, name, category, description, level, rarity, bulk, quantity, price_per, price_cp, price_gp, price_sp, price_pp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING id
`

type InsertItemsParams struct {
	MonsterID   pgtype.Int4
	ID          string
	Name        pgtype.Text
	Category    pgtype.Text
	Description pgtype.Text
	Level       pgtype.Text
	Rarity      pgtype.Text
	Bulk        pgtype.Text
	Quantity    pgtype.Text
	PricePer    pgtype.Int4
	PriceCp     pgtype.Int4
	PriceGp     pgtype.Int4
	PriceSp     pgtype.Int4
	PricePp     pgtype.Int4
}

func (q *Queries) InsertItems(ctx context.Context, arg InsertItemsParams) (string, error) {
	row := q.db.QueryRow(ctx, insertItems,
		arg.MonsterID,
		arg.ID,
		arg.Name,
		arg.Category,
		arg.Description,
		arg.Level,
		arg.Rarity,
		arg.Bulk,
		arg.Quantity,
		arg.PricePer,
		arg.PriceCp,
		arg.PriceGp,
		arg.PriceSp,
		arg.PricePp,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertMonster = `-- name: InsertMonster :one
INSERT INTO monsters (name, 
                        level, 
                        focus_points, 
                        traits_rarity, 
                        traits_size, 
                        attr_str, 
                        attr_dex, 
                        attr_con, 
                        attr_wis,
                        attr_int, 
                        attr_cha, 
                        saves_fort, 
                        saves_fort_detail,
                        saves_ref, 
                        saves_ref_detail, 
                        saves_will, 
                        saves_will_detail,
                        saves_exception, 
                        ac_value, 
                        ac_detail,
                        hp_value, 
                        hp_detail, 
                        perception_mod, 
                        perception_detail)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24)
RETURNING id
`

type InsertMonsterParams struct {
	Name             string
	Level            pgtype.Text
	FocusPoints      pgtype.Int4
	TraitsRarity     pgtype.Text
	TraitsSize       pgtype.Text
	AttrStr          pgtype.Text
	AttrDex          pgtype.Text
	AttrCon          pgtype.Text
	AttrWis          pgtype.Text
	AttrInt          pgtype.Text
	AttrCha          pgtype.Text
	SavesFort        pgtype.Text
	SavesFortDetail  pgtype.Text
	SavesRef         pgtype.Text
	SavesRefDetail   pgtype.Text
	SavesWill        pgtype.Text
	SavesWillDetail  pgtype.Text
	SavesException   pgtype.Text
	AcValue          pgtype.Text
	AcDetail         pgtype.Text
	HpValue          pgtype.Int4
	HpDetail         pgtype.Text
	PerceptionMod    pgtype.Text
	PerceptionDetail pgtype.Text
}

func (q *Queries) InsertMonster(ctx context.Context, arg InsertMonsterParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertMonster,
		arg.Name,
		arg.Level,
		arg.FocusPoints,
		arg.TraitsRarity,
		arg.TraitsSize,
		arg.AttrStr,
		arg.AttrDex,
		arg.AttrCon,
		arg.AttrWis,
		arg.AttrInt,
		arg.AttrCha,
		arg.SavesFort,
		arg.SavesFortDetail,
		arg.SavesRef,
		arg.SavesRefDetail,
		arg.SavesWill,
		arg.SavesWillDetail,
		arg.SavesException,
		arg.AcValue,
		arg.AcDetail,
		arg.HpValue,
		arg.HpDetail,
		arg.PerceptionMod,
		arg.PerceptionDetail,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertMonsterAction = `-- name: InsertMonsterAction :one
INSERT INTO monster_actions (monster_id, action_type, name, text, actions, category, rarity, dc)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type InsertMonsterActionParams struct {
	MonsterID  pgtype.Int4
	ActionType pgtype.Text
	Name       pgtype.Text
	Text       pgtype.Text
	Actions    pgtype.Text
	Category   pgtype.Text
	Rarity     pgtype.Text
	Dc         pgtype.Text
}

func (q *Queries) InsertMonsterAction(ctx context.Context, arg InsertMonsterActionParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertMonsterAction,
		arg.MonsterID,
		arg.ActionType,
		arg.Name,
		arg.Text,
		arg.Actions,
		arg.Category,
		arg.Rarity,
		arg.Dc,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertMonsterActionTraits = `-- name: InsertMonsterActionTraits :exec
INSERT INTO monster_action_traits (monster_action_id, trait)
VALUES($1, $2)
`

type InsertMonsterActionTraitsParams struct {
	MonsterActionID pgtype.Int4
	Trait           pgtype.Text
}

func (q *Queries) InsertMonsterActionTraits(ctx context.Context, arg InsertMonsterActionTraitsParams) error {
	_, err := q.db.Exec(ctx, insertMonsterActionTraits, arg.MonsterActionID, arg.Trait)
	return err
}

const insertMonsterAttackDamageBlock = `-- name: InsertMonsterAttackDamageBlock :exec
INSERT INTO attack_damage_blocks (attack_id, damage_roll, damage_type)
VALUES ($1, $2, $3)
`

type InsertMonsterAttackDamageBlockParams struct {
	AttackID   pgtype.Int4
	DamageRoll pgtype.Text
	DamageType pgtype.Text
}

func (q *Queries) InsertMonsterAttackDamageBlock(ctx context.Context, arg InsertMonsterAttackDamageBlockParams) error {
	_, err := q.db.Exec(ctx, insertMonsterAttackDamageBlock, arg.AttackID, arg.DamageRoll, arg.DamageType)
	return err
}

const insertMonsterAttacks = `-- name: InsertMonsterAttacks :one
INSERT INTO monster_attacks (monster_id, attack_category, name, attack_type, to_hit_bonus, effects_custom_string, effects_values)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type InsertMonsterAttacksParams struct {
	MonsterID           pgtype.Int4
	AttackCategory      pgtype.Text
	Name                pgtype.Text
	AttackType          pgtype.Text
	ToHitBonus          pgtype.Text
	EffectsCustomString pgtype.Text
	EffectsValues       []string
}

func (q *Queries) InsertMonsterAttacks(ctx context.Context, arg InsertMonsterAttacksParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertMonsterAttacks,
		arg.MonsterID,
		arg.AttackCategory,
		arg.Name,
		arg.AttackType,
		arg.ToHitBonus,
		arg.EffectsCustomString,
		arg.EffectsValues,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertMonsterDamageModifier = `-- name: InsertMonsterDamageModifier :one
INSERT INTO monster_damage_modifiers (monster_id, modifier_category, value, damage_type)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type InsertMonsterDamageModifierParams struct {
	MonsterID        pgtype.Int4
	ModifierCategory pgtype.Text
	Value            pgtype.Int4
	DamageType       pgtype.Text
}

func (q *Queries) InsertMonsterDamageModifier(ctx context.Context, arg InsertMonsterDamageModifierParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertMonsterDamageModifier,
		arg.MonsterID,
		arg.ModifierCategory,
		arg.Value,
		arg.DamageType,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertMonsterImmunities = `-- name: InsertMonsterImmunities :exec
INSERT INTO monster_immunities (monster_id, immunity)
VALUES ($1, $2)
`

type InsertMonsterImmunitiesParams struct {
	MonsterID pgtype.Int4
	Immunity  pgtype.Text
}

func (q *Queries) InsertMonsterImmunities(ctx context.Context, arg InsertMonsterImmunitiesParams) error {
	_, err := q.db.Exec(ctx, insertMonsterImmunities, arg.MonsterID, arg.Immunity)
	return err
}

const insertMonsterLanguages = `-- name: InsertMonsterLanguages :exec
INSERT INTO monster_languages (monster_id, language)
values ($1, $2)
`

type InsertMonsterLanguagesParams struct {
	MonsterID pgtype.Int4
	Language  pgtype.Text
}

func (q *Queries) InsertMonsterLanguages(ctx context.Context, arg InsertMonsterLanguagesParams) error {
	_, err := q.db.Exec(ctx, insertMonsterLanguages, arg.MonsterID, arg.Language)
	return err
}

const insertMonsterModifierDoubles = `-- name: InsertMonsterModifierDoubles :exec
INSERT INTO monster_modifier_doubles (modifier_id, double_value)
VALUES ($1, $2)
`

type InsertMonsterModifierDoublesParams struct {
	ModifierID  pgtype.Int4
	DoubleValue pgtype.Text
}

func (q *Queries) InsertMonsterModifierDoubles(ctx context.Context, arg InsertMonsterModifierDoublesParams) error {
	_, err := q.db.Exec(ctx, insertMonsterModifierDoubles, arg.ModifierID, arg.DoubleValue)
	return err
}

const insertMonsterModifierExceptions = `-- name: InsertMonsterModifierExceptions :exec
INSERT INTO monster_modifier_exceptions (modifier_id, exception)
VALUES ($1, $2)
`

type InsertMonsterModifierExceptionsParams struct {
	ModifierID pgtype.Int4
	Exception  pgtype.Text
}

func (q *Queries) InsertMonsterModifierExceptions(ctx context.Context, arg InsertMonsterModifierExceptionsParams) error {
	_, err := q.db.Exec(ctx, insertMonsterModifierExceptions, arg.ModifierID, arg.Exception)
	return err
}

const insertMonsterMovements = `-- name: InsertMonsterMovements :exec
INSERT INTO monster_movements(monster_id, movement_type, speed, notes)
VALUES ($1, $2, $3, $4)
`

type InsertMonsterMovementsParams struct {
	MonsterID    pgtype.Int4
	MovementType pgtype.Text
	Speed        pgtype.Text
	Notes        pgtype.Text
}

func (q *Queries) InsertMonsterMovements(ctx context.Context, arg InsertMonsterMovementsParams) error {
	_, err := q.db.Exec(ctx, insertMonsterMovements,
		arg.MonsterID,
		arg.MovementType,
		arg.Speed,
		arg.Notes,
	)
	return err
}

const insertMonsterSenses = `-- name: InsertMonsterSenses :exec
INSERT INTO monster_senses (monster_id, name, range, acuity, detail)
VALUES ($1, $2, $3, $4, $5)
`

type InsertMonsterSensesParams struct {
	MonsterID pgtype.Int4
	Name      pgtype.Text
	Range     pgtype.Text
	Acuity    pgtype.Text
	Detail    pgtype.Text
}

func (q *Queries) InsertMonsterSenses(ctx context.Context, arg InsertMonsterSensesParams) error {
	_, err := q.db.Exec(ctx, insertMonsterSenses,
		arg.MonsterID,
		arg.Name,
		arg.Range,
		arg.Acuity,
		arg.Detail,
	)
	return err
}

const insertMonsterSkillSpecials = `-- name: InsertMonsterSkillSpecials :exec
INSERT INTO monster_skill_specials(skill_id, value, label, predicates)
VALUES ($1, $2, $3, $4)
`

type InsertMonsterSkillSpecialsParams struct {
	SkillID    pgtype.Int4
	Value      pgtype.Int4
	Label      pgtype.Text
	Predicates []string
}

func (q *Queries) InsertMonsterSkillSpecials(ctx context.Context, arg InsertMonsterSkillSpecialsParams) error {
	_, err := q.db.Exec(ctx, insertMonsterSkillSpecials,
		arg.SkillID,
		arg.Value,
		arg.Label,
		arg.Predicates,
	)
	return err
}

const insertMonsterSkills = `-- name: InsertMonsterSkills :one
INSERT INTO monster_skills (monster_id, name, value)
VALUES($1, $2, $3)
RETURNING id
`

type InsertMonsterSkillsParams struct {
	MonsterID pgtype.Int4
	Name      pgtype.Text
	Value     pgtype.Int4
}

func (q *Queries) InsertMonsterSkills(ctx context.Context, arg InsertMonsterSkillsParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertMonsterSkills, arg.MonsterID, arg.Name, arg.Value)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertPreparedSlots = `-- name: InsertPreparedSlots :exec
INSERT INTO prepared_slots (prepared_spell_casting_id, level, spell_id)
VALUES ($1, $2, $3)
`

type InsertPreparedSlotsParams struct {
	PreparedSpellCastingID pgtype.Int4
	Level                  pgtype.Text
	SpellID                pgtype.Text
}

func (q *Queries) InsertPreparedSlots(ctx context.Context, arg InsertPreparedSlotsParams) error {
	_, err := q.db.Exec(ctx, insertPreparedSlots, arg.PreparedSpellCastingID, arg.Level, arg.SpellID)
	return err
}

const insertPreparedSpellCasting = `-- name: InsertPreparedSpellCasting :one
INSERT INTO prepared_spell_casting (monster_id, dc, tradition, mod, spellcasting_id, description)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type InsertPreparedSpellCastingParams struct {
	MonsterID      pgtype.Int4
	Dc             pgtype.Int4
	Tradition      pgtype.Text
	Mod            pgtype.Text
	SpellcastingID pgtype.Text
	Description    pgtype.Text
}

func (q *Queries) InsertPreparedSpellCasting(ctx context.Context, arg InsertPreparedSpellCastingParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertPreparedSpellCasting,
		arg.MonsterID,
		arg.Dc,
		arg.Tradition,
		arg.Mod,
		arg.SpellcastingID,
		arg.Description,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertRitualData = `-- name: InsertRitualData :exec
INSERT INTO ritual_data (spell_id, primary_check, secondary_casters, secondary_check)
VALUES ($1, $2, $3, $4)
`

type InsertRitualDataParams struct {
	SpellID          pgtype.Text
	PrimaryCheck     pgtype.Text
	SecondaryCasters pgtype.Text
	SecondaryCheck   pgtype.Text
}

func (q *Queries) InsertRitualData(ctx context.Context, arg InsertRitualDataParams) error {
	_, err := q.db.Exec(ctx, insertRitualData,
		arg.SpellID,
		arg.PrimaryCheck,
		arg.SecondaryCasters,
		arg.SecondaryCheck,
	)
	return err
}

const insertSpell = `-- name: InsertSpell :one
INSERT INTO spells (name, cast_level, spell_base_level, description, range, cast_time, cast_requirements, rarity, at_will, spell_casting_block_location_id, uses, ritual, targets)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING id
`

type InsertSpellParams struct {
	Name                        pgtype.Text
	CastLevel                   pgtype.Text
	SpellBaseLevel              pgtype.Text
	Description                 pgtype.Text
	Range                       pgtype.Text
	CastTime                    pgtype.Text
	CastRequirements            pgtype.Text
	Rarity                      pgtype.Text
	AtWill                      pgtype.Bool
	SpellCastingBlockLocationID pgtype.Text
	Uses                        pgtype.Text
	Ritual                      pgtype.Bool
	Targets                     pgtype.Text
}

func (q *Queries) InsertSpell(ctx context.Context, arg InsertSpellParams) (string, error) {
	row := q.db.QueryRow(ctx, insertSpell,
		arg.Name,
		arg.CastLevel,
		arg.SpellBaseLevel,
		arg.Description,
		arg.Range,
		arg.CastTime,
		arg.CastRequirements,
		arg.Rarity,
		arg.AtWill,
		arg.SpellCastingBlockLocationID,
		arg.Uses,
		arg.Ritual,
		arg.Targets,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertSpellArea = `-- name: InsertSpellArea :exec
INSERT INTO spell_areas (spell_id, area_type, value, detail)
VALUES($1, $2, $3, $4)
`

type InsertSpellAreaParams struct {
	SpellID  pgtype.Text
	AreaType pgtype.Text
	Value    pgtype.Text
	Detail   pgtype.Text
}

func (q *Queries) InsertSpellArea(ctx context.Context, arg InsertSpellAreaParams) error {
	_, err := q.db.Exec(ctx, insertSpellArea,
		arg.SpellID,
		arg.AreaType,
		arg.Value,
		arg.Detail,
	)
	return err
}

const insertSpellDefences = `-- name: InsertSpellDefences :exec
INSERT INTO spell_defenses (spell_id, save, basic)
VALUES ($1, $2, $3)
`

type InsertSpellDefencesParams struct {
	SpellID pgtype.Text
	Save    pgtype.Text
	Basic   pgtype.Bool
}

func (q *Queries) InsertSpellDefences(ctx context.Context, arg InsertSpellDefencesParams) error {
	_, err := q.db.Exec(ctx, insertSpellDefences, arg.SpellID, arg.Save, arg.Basic)
	return err
}

const insertSpellDuration = `-- name: InsertSpellDuration :exec
INSERT INTO spell_durations (spell_id, sustained, duration)
VALUES ($1, $2, $3)
`

type InsertSpellDurationParams struct {
	SpellID   pgtype.Text
	Sustained pgtype.Bool
	Duration  pgtype.Text
}

func (q *Queries) InsertSpellDuration(ctx context.Context, arg InsertSpellDurationParams) error {
	_, err := q.db.Exec(ctx, insertSpellDuration, arg.SpellID, arg.Sustained, arg.Duration)
	return err
}

const insertSpellTraits = `-- name: InsertSpellTraits :exec
INSERT INTO spell_traits (spell_id, trait)
VALUES ($1, $2)
`

type InsertSpellTraitsParams struct {
	SpellID pgtype.Text
	Trait   pgtype.Text
}

func (q *Queries) InsertSpellTraits(ctx context.Context, arg InsertSpellTraitsParams) error {
	_, err := q.db.Exec(ctx, insertSpellTraits, arg.SpellID, arg.Trait)
	return err
}

const insertSpontaneousSpellList = `-- name: InsertSpontaneousSpellList :exec
INSERT INTO spontaneous_spell_list (spontaneous_spell_casting_id, spell_id)
VALUES ($1, $2)
`

type InsertSpontaneousSpellListParams struct {
	SpontaneousSpellCastingID pgtype.Int4
	SpellID                   pgtype.Text
}

func (q *Queries) InsertSpontaneousSpellList(ctx context.Context, arg InsertSpontaneousSpellListParams) error {
	_, err := q.db.Exec(ctx, insertSpontaneousSpellList, arg.SpontaneousSpellCastingID, arg.SpellID)
	return err
}

const insertSpontaneousSpellSlots = `-- name: InsertSpontaneousSpellSlots :exec
INSERT INTO spontaneous_slots (spontaneous_spell_casting_id, level, casts)
VALUES ($1, $2, $3)
`

type InsertSpontaneousSpellSlotsParams struct {
	SpontaneousSpellCastingID pgtype.Int4
	Level                     pgtype.Text
	Casts                     pgtype.Text
}

func (q *Queries) InsertSpontaneousSpellSlots(ctx context.Context, arg InsertSpontaneousSpellSlotsParams) error {
	_, err := q.db.Exec(ctx, insertSpontaneousSpellSlots, arg.SpontaneousSpellCastingID, arg.Level, arg.Casts)
	return err
}

const insertSpontaneousSpells = `-- name: InsertSpontaneousSpells :one
INSERT INTO spontaneous_spell_casting (monster_id, dc, id_string, tradition, mod)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertSpontaneousSpellsParams struct {
	MonsterID pgtype.Int4
	Dc        pgtype.Int4
	IDString  pgtype.Text
	Tradition pgtype.Text
	Mod       pgtype.Text
}

func (q *Queries) InsertSpontaneousSpells(ctx context.Context, arg InsertSpontaneousSpellsParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertSpontaneousSpells,
		arg.MonsterID,
		arg.Dc,
		arg.IDString,
		arg.Tradition,
		arg.Mod,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
